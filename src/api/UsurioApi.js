/*
 * sistema-api
 * Api para o Sistema de Gerenciamento de Entregas
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';
import {V1UsuarioBody} from '../model/V1UsuarioBody';

/**
* Usurio service.
* @module api/UsurioApi
* @version 1.0.0
*/
export class UsurioApi {

    /**
    * Constructs a new UsurioApi. 
    * @alias module:api/UsurioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getUsuario operation.
     * @callback moduleapi/UsurioApi~getUsuarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retorna os dados de usuário
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id ID do funcionario
     * @param {module:api/UsurioApi~getUsuarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUsuario(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/usuario', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1UsuarioDelete operation.
     * @callback moduleapi/UsurioApi~v1UsuarioDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId ID única do usuário.
     * @param {module:api/UsurioApi~v1UsuarioDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1UsuarioDelete(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1UsuarioDelete");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'user_id': userId
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/usuario', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1UsuarioPost operation.
     * @callback moduleapi/UsurioApi~v1UsuarioPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cadastra um novo usuário.
     * @param {String} email 
     * @param {Number} telefone 
     * @param {Boolean} whatsapp 
     * @param {String} oauthgoogle 
     * @param {String} oauthhotmail 
     * @param {Number} nome 
     * @param {Number} tipo 
     * @param {module:api/UsurioApi~v1UsuarioPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1UsuarioPost(email, telefone, whatsapp, oauthgoogle, oauthhotmail, nome, tipo, callback) {
      
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling v1UsuarioPost");
      }
      // verify the required parameter 'telefone' is set
      if (telefone === undefined || telefone === null) {
        throw new Error("Missing the required parameter 'telefone' when calling v1UsuarioPost");
      }
      // verify the required parameter 'whatsapp' is set
      if (whatsapp === undefined || whatsapp === null) {
        throw new Error("Missing the required parameter 'whatsapp' when calling v1UsuarioPost");
      }
      // verify the required parameter 'oauthgoogle' is set
      if (oauthgoogle === undefined || oauthgoogle === null) {
        throw new Error("Missing the required parameter 'oauthgoogle' when calling v1UsuarioPost");
      }
      // verify the required parameter 'oauthhotmail' is set
      if (oauthhotmail === undefined || oauthhotmail === null) {
        throw new Error("Missing the required parameter 'oauthhotmail' when calling v1UsuarioPost");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling v1UsuarioPost");
      }
      // verify the required parameter 'tipo' is set
      if (tipo === undefined || tipo === null) {
        throw new Error("Missing the required parameter 'tipo' when calling v1UsuarioPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'email': email,'telefone': telefone,'whatsapp': whatsapp,'oauthgoogle': oauthgoogle,'oauthhotmail': oauthhotmail,'nome': nome,'tipo': tipo
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/usuario', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1UsuarioPut operation.
     * @callback moduleapi/UsurioApi~v1UsuarioPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/V1UsuarioBody} opts.body 
     * @param {String} opts.email e-mail do usuário.
     * @param {Number} opts.telefone telefone do usuário.
     * @param {Boolean} opts.whatsapp caso o telefone seja do whatsapp.
     * @param {String} opts.oauthgoogle oauth do usuário.
     * @param {String} opts.oauthhotmail oauth do usuário.
     * @param {Number} opts.nome nome do usuário.
     * @param {Number} opts.tipo email do usuário.
     * @param {module:api/UsurioApi~v1UsuarioPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1UsuarioPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'email': opts['email'],'telefone': opts['telefone'],'whatsapp': opts['whatsapp'],'oauthgoogle': opts['oauthgoogle'],'oauthhotmail': opts['oauthhotmail'],'nome': opts['nome'],'tipo': opts['tipo']
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/usuario', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}