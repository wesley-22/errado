/*
 * sistema-api
 * Api para o Sistema de Gerenciamento de Entregas
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';

/**
* Guias service.
* @module api/GuiasApi
* @version 1.0.0
*/
export class GuiasApi {

    /**
    * Constructs a new GuiasApi. 
    * @alias module:api/GuiasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getGuias operation.
     * @callback moduleapi/GuiasApi~getGuiasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retorna lista de todas as guias de uma competencia
     * @param {Number} mes 
     * @param {String} ano 
     * @param {module:api/GuiasApi~getGuiasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGuias(mes, ano, callback) {
      
      let postBody = null;
      // verify the required parameter 'mes' is set
      if (mes === undefined || mes === null) {
        throw new Error("Missing the required parameter 'mes' when calling getGuias");
      }
      // verify the required parameter 'ano' is set
      if (ano === undefined || ano === null) {
        throw new Error("Missing the required parameter 'ano' when calling getGuias");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'mes': mes,'ano': ano
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v1/guias', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postGuia operation.
     * @callback moduleapi/GuiasApi~postGuiaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * faz o envio de uma guia para armazenamento
     * @param {String} name 
     * @param {String} tipoGuia 
     * @param {Object} guia 
     * @param {module:api/GuiasApi~postGuiaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postGuia(name, tipoGuia, guia, callback) {
      
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postGuia");
      }
      // verify the required parameter 'tipoGuia' is set
      if (tipoGuia === undefined || tipoGuia === null) {
        throw new Error("Missing the required parameter 'tipoGuia' when calling postGuia");
      }
      // verify the required parameter 'guia' is set
      if (guia === undefined || guia === null) {
        throw new Error("Missing the required parameter 'guia' when calling postGuia");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': name,'tipoGuia': tipoGuia,'guia': guia
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/guias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}