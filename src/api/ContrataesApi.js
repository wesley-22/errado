/*
 * sistema-api
 * Api para o Sistema de Gerenciamento de Entregas
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponse2011} from '../model/InlineResponse2011';

/**
* Contrataes service.
* @module api/ContrataesApi
* @version 1.0.0
*/
export class ContrataesApi {

    /**
    * Constructs a new ContrataesApi. 
    * @alias module:api/ContrataesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v1ContratacoesCandidatoGet operation.
     * @callback moduleapi/ContrataesApi~v1ContratacoesCandidatoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * busca os dados da contratação.
     * @param {String} contratacaoId 
     * @param {module:api/ContrataesApi~v1ContratacoesCandidatoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v1ContratacoesCandidatoGet(contratacaoId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contratacaoId' is set
      if (contratacaoId === undefined || contratacaoId === null) {
        throw new Error("Missing the required parameter 'contratacaoId' when calling v1ContratacoesCandidatoGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'contratacao_id': contratacaoId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/v1/contratacoes/candidato', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1ContratacoesCandidatoPost operation.
     * @callback moduleapi/ContrataesApi~v1ContratacoesCandidatoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adiciona uma nova contratação.
     * @param {String} nomePai 
     * @param {String} nomeMae 
     * @param {String} dtNasc 
     * @param {String} estadoNasc 
     * @param {String} cidadeNasc 
     * @param {String} nCpf 
     * @param {String} nCtps 
     * @param {String} dtCtps 
     * @param {String} nRg 
     * @param {String} dtRg 
     * @param {String} emitenteRg 
     * @param {String} nRua 
     * @param {String} estado 
     * @param {String} cidade 
     * @param {String} bairro 
     * @param {module:api/ContrataesApi~v1ContratacoesCandidatoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v1ContratacoesCandidatoPost(nomePai, nomeMae, dtNasc, estadoNasc, cidadeNasc, nCpf, nCtps, dtCtps, nRg, dtRg, emitenteRg, nRua, estado, cidade, bairro, callback) {
      
      let postBody = null;
      // verify the required parameter 'nomePai' is set
      if (nomePai === undefined || nomePai === null) {
        throw new Error("Missing the required parameter 'nomePai' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'nomeMae' is set
      if (nomeMae === undefined || nomeMae === null) {
        throw new Error("Missing the required parameter 'nomeMae' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'dtNasc' is set
      if (dtNasc === undefined || dtNasc === null) {
        throw new Error("Missing the required parameter 'dtNasc' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'estadoNasc' is set
      if (estadoNasc === undefined || estadoNasc === null) {
        throw new Error("Missing the required parameter 'estadoNasc' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'cidadeNasc' is set
      if (cidadeNasc === undefined || cidadeNasc === null) {
        throw new Error("Missing the required parameter 'cidadeNasc' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'nCpf' is set
      if (nCpf === undefined || nCpf === null) {
        throw new Error("Missing the required parameter 'nCpf' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'nCtps' is set
      if (nCtps === undefined || nCtps === null) {
        throw new Error("Missing the required parameter 'nCtps' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'dtCtps' is set
      if (dtCtps === undefined || dtCtps === null) {
        throw new Error("Missing the required parameter 'dtCtps' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'nRg' is set
      if (nRg === undefined || nRg === null) {
        throw new Error("Missing the required parameter 'nRg' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'dtRg' is set
      if (dtRg === undefined || dtRg === null) {
        throw new Error("Missing the required parameter 'dtRg' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'emitenteRg' is set
      if (emitenteRg === undefined || emitenteRg === null) {
        throw new Error("Missing the required parameter 'emitenteRg' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'nRua' is set
      if (nRua === undefined || nRua === null) {
        throw new Error("Missing the required parameter 'nRua' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'estado' is set
      if (estado === undefined || estado === null) {
        throw new Error("Missing the required parameter 'estado' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'cidade' is set
      if (cidade === undefined || cidade === null) {
        throw new Error("Missing the required parameter 'cidade' when calling v1ContratacoesCandidatoPost");
      }
      // verify the required parameter 'bairro' is set
      if (bairro === undefined || bairro === null) {
        throw new Error("Missing the required parameter 'bairro' when calling v1ContratacoesCandidatoPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'nome_pai': nomePai,'nome_mae': nomeMae,'dt_nasc': dtNasc,'estado_nasc': estadoNasc,'cidade_nasc': cidadeNasc,'n_cpf': nCpf,'n_ctps': nCtps,'dt_ctps': dtCtps,'n_rg': nRg,'dt_rg': dtRg,'emitente_rg': emitenteRg,'n_rua': nRua,'estado': estado,'cidade': cidade,'bairro': bairro
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/v1/contratacoes/candidato', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1ContratacoesGet operation.
     * @callback moduleapi/ContrataesApi~v1ContratacoesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * busca lista de contratações de uma empresa.
     * @param {Number} cdempresa 
     * @param {module:api/ContrataesApi~v1ContratacoesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v1ContratacoesGet(cdempresa, callback) {
      
      let postBody = null;
      // verify the required parameter 'cdempresa' is set
      if (cdempresa === undefined || cdempresa === null) {
        throw new Error("Missing the required parameter 'cdempresa' when calling v1ContratacoesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'cdempresa': cdempresa
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/v1/contratacoes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1ContratacoesPatch operation.
     * @callback moduleapi/ContrataesApi~v1ContratacoesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * atualiza o status da contratação
     * @param {Number} contratacaoId 
     * @param {Boolean} status 
     * @param {module:api/ContrataesApi~v1ContratacoesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v1ContratacoesPatch(contratacaoId, status, callback) {
      
      let postBody = null;
      // verify the required parameter 'contratacaoId' is set
      if (contratacaoId === undefined || contratacaoId === null) {
        throw new Error("Missing the required parameter 'contratacaoId' when calling v1ContratacoesPatch");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling v1ContratacoesPatch");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'contratacao_id': contratacaoId,'status': status
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/v1/contratacoes', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v1ContratacoesPost operation.
     * @callback moduleapi/ContrataesApi~v1ContratacoesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adiciona uma nova contratação.
     * @param {Number} cdempresa 
     * @param {String} nome 
     * @param {String} data 
     * @param {String} funcao 
     * @param {String} cboId 
     * @param {String} horaId 
     * @param {String} salario 
     * @param {String} tipoContrato 
     * @param {String} modNome 
     * @param {String} email 
     * @param {String} telefone 
     * @param {String} whatsapp 
     * @param {String} dtContratacao 
     * @param {module:api/ContrataesApi~v1ContratacoesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v1ContratacoesPost(cdempresa, nome, data, funcao, cboId, horaId, salario, tipoContrato, modNome, email, telefone, whatsapp, dtContratacao, callback) {
      
      let postBody = null;
      // verify the required parameter 'cdempresa' is set
      if (cdempresa === undefined || cdempresa === null) {
        throw new Error("Missing the required parameter 'cdempresa' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'nome' is set
      if (nome === undefined || nome === null) {
        throw new Error("Missing the required parameter 'nome' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'funcao' is set
      if (funcao === undefined || funcao === null) {
        throw new Error("Missing the required parameter 'funcao' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'cboId' is set
      if (cboId === undefined || cboId === null) {
        throw new Error("Missing the required parameter 'cboId' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'horaId' is set
      if (horaId === undefined || horaId === null) {
        throw new Error("Missing the required parameter 'horaId' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'salario' is set
      if (salario === undefined || salario === null) {
        throw new Error("Missing the required parameter 'salario' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'tipoContrato' is set
      if (tipoContrato === undefined || tipoContrato === null) {
        throw new Error("Missing the required parameter 'tipoContrato' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'modNome' is set
      if (modNome === undefined || modNome === null) {
        throw new Error("Missing the required parameter 'modNome' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'telefone' is set
      if (telefone === undefined || telefone === null) {
        throw new Error("Missing the required parameter 'telefone' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'whatsapp' is set
      if (whatsapp === undefined || whatsapp === null) {
        throw new Error("Missing the required parameter 'whatsapp' when calling v1ContratacoesPost");
      }
      // verify the required parameter 'dtContratacao' is set
      if (dtContratacao === undefined || dtContratacao === null) {
        throw new Error("Missing the required parameter 'dtContratacao' when calling v1ContratacoesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'cdempresa': cdempresa,'nome': nome,'data': data,'funcao': funcao,'cbo_id': cboId,'hora_id': horaId,'salario': salario,'tipo_contrato': tipoContrato,'mod_nome': modNome,'email': email,'telefone': telefone,'whatsapp': whatsapp,'dt_contratacao': dtContratacao
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/contratacoes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}